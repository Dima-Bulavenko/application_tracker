name: CI Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  # Backend linting, formatting
  backend-check:
    name: Backend Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run Ruff (linter)
        run: poetry run ruff check .

      - name: Run Ruff (formatter)
        run: poetry run ruff format --check .

      - name: Run MyPy (type checking)
        run: poetry run mypy .

  # Backend testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      POSTGRES_HOST_TEST: localhost
      POSTGRES_PORT_TEST: 5432
      POSTGRES_USER_TEST: test_user
      POSTGRES_PASSWORD_TEST: test_password
      POSTGRES_DB_TEST: test_db
      SECRET_KEY: test-secret-key-for-ci
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run tests
        run: poetry run pytest app/tests/ -v

  # Frontend linting and type checking
  # frontend-check:
  #   name: Frontend Checks
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./frontend

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "23"
  #         cache: "npm"
  #         cache-dependency-path: frontend/package-lock.json

  #     - name: Install dependencies
  #       run: npm ci

  # - name: Run ESLint
  #   run: npm run lint

  # - name: Run Prettier (format check)
  #   run: npm run format:check

  # - name: Run TypeScript type checking
  #   run: npx tsc --noEmit

  # # Frontend build verification
  # frontend-build:
  #   name: Frontend Build
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./frontend

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "23"
  #         cache: "npm"
  #         cache-dependency-path: frontend/package-lock.json

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Build application
  #       run: npm run build

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
