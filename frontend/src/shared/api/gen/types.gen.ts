// This file is auto-generated by @hey-api/openapi-ts

export type AccessTokenResponse = {
  access_token: string;
  token_type?: string;
};

export type AppStatus = 'applied' | 'interview' | 'offer' | 'rejected';

export type ApplicationCreate = {
  role: string;
  company: CompanyCreate;
  status?: AppStatus;
  work_type?: WorkType;
  work_location?: WorkLocation;
  note?: string | null;
  application_url?: string | null;
  interview_date?: string | null;
};

export type ApplicationOrderBy = 'time_create' | 'time_update';

export type ApplicationRead = {
  role: string;
  company_id: number;
  user_id: number;
  id: number;
  status: AppStatus;
  work_type: WorkType;
  work_location: WorkLocation;
  note?: string | null;
  application_url?: string | null;
  time_create: string;
  time_update: string;
  interview_date?: string | null;
};

export type ApplicationReadWithCompany = {
  role: string;
  company_id: number;
  user_id: number;
  id: number;
  status: AppStatus;
  work_type: WorkType;
  work_location: WorkLocation;
  note?: string | null;
  application_url?: string | null;
  time_create: string;
  time_update: string;
  interview_date?: string | null;
  company: CompanyRead;
};

export type ApplicationUpdate = {
  role?: string | null;
  company?: CompanyCreate | null;
  status?: AppStatus | null;
  work_type?: WorkType | null;
  work_location?: WorkLocation | null;
  note?: string | null;
  application_url?: string | null;
  interview_date?: string | null;
};

export type CompanyCreate = {
  name: string;
};

export type CompanyOrderBy = 'name';

export type CompanyRead = {
  id: number;
  name: string;
};

export type ErrorResponse = {
  detail: string;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

export type MessageResponse = {
  message: string;
};

export type UserChangePassword = {
  /**
   * Password must be 8 characters long, contain at least one uppercase letter and one number.
   */
  old_password: string;
  /**
   * Password must be 8 characters long, contain at least one uppercase letter and one number.
   */
  new_password: string;
  /**
   * Password must be 8 characters long, contain at least one uppercase letter and one number.
   */
  confirm_new_password: string;
};

export type UserCreate = {
  /**
   * User's email address
   */
  username: string;
  /**
   * Password must be 8 characters long, contain at least one uppercase letter and one number.
   */
  password: string;
};

export type UserLogin = {
  /**
   * User's email address
   */
  username: string;
  /**
   * Password must be 8 characters long, contain at least one uppercase letter and one number.
   */
  password: string;
};

export type UserRead = {
  id: number;
  /**
   * User's email address
   */
  username: string;
  first_name?: string | null;
  second_name?: string | null;
  time_create: string;
  time_update: string;
  is_active?: boolean;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type WorkLocation = 'on_site' | 'remote' | 'hybrid';

export type WorkType =
  | 'full_time'
  | 'part_time'
  | 'internship'
  | 'contract'
  | 'other';

export type CreateUserData = {
  body: UserCreate;
  path?: never;
  query?: never;
  url: '/users/';
};

export type CreateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
  /**
   * Successful Response
   */
  201: MessageResponse;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type ActivateUserData = {
  body?: never;
  path?: never;
  query: {
    token: string;
  };
  url: '/users/activate';
};

export type ActivateUserErrors = {
  /**
   * Invalid or expired activation token
   */
  400: ErrorResponse;
  /**
   * User not found
   */
  404: ErrorResponse;
  /**
   * User is already activated
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ActivateUserError = ActivateUserErrors[keyof ActivateUserErrors];

export type ActivateUserResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type ActivateUserResponse =
  ActivateUserResponses[keyof ActivateUserResponses];

export type ChangePasswordData = {
  body: UserChangePassword;
  path?: never;
  query?: never;
  url: '/users/change-password';
};

export type ChangePasswordErrors = {
  /**
   * Old password is incorrect
   */
  400: ErrorResponse;
  /**
   * Missing, invalid, or expired access token
   */
  401: ErrorResponse;
  /**
   * User not found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ChangePasswordError =
  ChangePasswordErrors[keyof ChangePasswordErrors];

export type ChangePasswordResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type ChangePasswordResponse =
  ChangePasswordResponses[keyof ChangePasswordResponses];

export type GetCurrentUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/users/me';
};

export type GetCurrentUserErrors = {
  /**
   * Missing, invalid, or expired access token
   */
  401: ErrorResponse;
  /**
   * User not found
   */
  404: ErrorResponse;
};

export type GetCurrentUserError =
  GetCurrentUserErrors[keyof GetCurrentUserErrors];

export type GetCurrentUserResponses = {
  /**
   * Successful Response
   */
  200: UserRead;
};

export type GetCurrentUserResponse =
  GetCurrentUserResponses[keyof GetCurrentUserResponses];

export type GetApplicationsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Number of items to return
     */
    limit?: number;
    /**
     * Number of items to skip before starting to collect the result set
     */
    offset?: number;
    order_by?: ApplicationOrderBy;
    order_direction?: 'asc' | 'desc';
  };
  url: '/applications/';
};

export type GetApplicationsErrors = {
  /**
   * Access token is invalid
   */
  401: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetApplicationsError =
  GetApplicationsErrors[keyof GetApplicationsErrors];

export type GetApplicationsResponses = {
  /**
   * Successful Response
   */
  200: Array<ApplicationReadWithCompany>;
};

export type GetApplicationsResponse =
  GetApplicationsResponses[keyof GetApplicationsResponses];

export type CreateApplicationData = {
  body: ApplicationCreate;
  path?: never;
  query?: never;
  url: '/applications/';
};

export type CreateApplicationErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateApplicationError =
  CreateApplicationErrors[keyof CreateApplicationErrors];

export type CreateApplicationResponses = {
  /**
   * Successful Response
   */
  200: ApplicationRead;
};

export type CreateApplicationResponse =
  CreateApplicationResponses[keyof CreateApplicationResponses];

export type DeleteApplicationData = {
  body?: never;
  path: {
    application_id: number;
  };
  query?: never;
  url: '/applications/{application_id}';
};

export type DeleteApplicationErrors = {
  /**
   * Access token is invalid
   */
  401: ErrorResponse;
  /**
   * User is not authorized to delete this application
   */
  403: ErrorResponse;
  /**
   * Application not found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteApplicationError =
  DeleteApplicationErrors[keyof DeleteApplicationErrors];

export type DeleteApplicationResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteApplicationResponse =
  DeleteApplicationResponses[keyof DeleteApplicationResponses];

export type GetApplicationByIdData = {
  body?: never;
  path: {
    application_id: number;
  };
  query?: never;
  url: '/applications/{application_id}';
};

export type GetApplicationByIdErrors = {
  /**
   * Access token is invalid
   */
  401: ErrorResponse;
  /**
   * User is not authorized to access this application
   */
  403: ErrorResponse;
  /**
   * Application not found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetApplicationByIdError =
  GetApplicationByIdErrors[keyof GetApplicationByIdErrors];

export type GetApplicationByIdResponses = {
  /**
   * Successful Response
   */
  200: ApplicationRead;
};

export type GetApplicationByIdResponse =
  GetApplicationByIdResponses[keyof GetApplicationByIdResponses];

export type UpdateApplicationData = {
  body: ApplicationUpdate;
  path: {
    application_id: number;
  };
  query?: never;
  url: '/applications/{application_id}';
};

export type UpdateApplicationErrors = {
  /**
   * Access token is invalid
   */
  401: ErrorResponse;
  /**
   * User is not authorized to update this application, or is not active
   */
  403: ErrorResponse;
  /**
   * Application or User not found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateApplicationError =
  UpdateApplicationErrors[keyof UpdateApplicationErrors];

export type UpdateApplicationResponses = {
  /**
   * Successful Response
   */
  200: ApplicationRead;
};

export type UpdateApplicationResponse =
  UpdateApplicationResponses[keyof UpdateApplicationResponses];

export type GetUserCompaniesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Number of items to return
     */
    limit?: number;
    /**
     * Number of items to skip before starting to collect the result set
     */
    offset?: number;
    order_by?: CompanyOrderBy;
    order_direction?: 'asc' | 'desc';
    name_contains?: string | null;
  };
  url: '/companies/user';
};

export type GetUserCompaniesErrors = {
  /**
   * Access token is invalid
   */
  401: ErrorResponse;
  /**
   * Validation error
   */
  422: ErrorResponse;
};

export type GetUserCompaniesError =
  GetUserCompaniesErrors[keyof GetUserCompaniesErrors];

export type GetUserCompaniesResponses = {
  /**
   * Successful Response
   */
  200: Array<CompanyRead>;
};

export type GetUserCompaniesResponse =
  GetUserCompaniesResponses[keyof GetUserCompaniesResponses];

export type GetCompanyData = {
  body?: never;
  path: {
    company_id: number;
  };
  query?: never;
  url: '/companies/{company_id}';
};

export type GetCompanyErrors = {
  /**
   * Application not found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetCompanyError = GetCompanyErrors[keyof GetCompanyErrors];

export type GetCompanyResponses = {
  /**
   * Successful Response
   */
  200: CompanyRead;
};

export type GetCompanyResponse = GetCompanyResponses[keyof GetCompanyResponses];

export type LoginData = {
  body: UserLogin;
  path?: never;
  query?: never;
  url: '/auth/login';
};

export type LoginErrors = {
  /**
   * Invalid credentials
   */
  401: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
  /**
   * Successful Response
   */
  200: AccessTokenResponse;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type RefreshTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/refresh';
};

export type RefreshTokenErrors = {
  /**
   * Refresh token is not valid or expired
   */
  401: ErrorResponse;
  /**
   * User not found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type RefreshTokenError = RefreshTokenErrors[keyof RefreshTokenErrors];

export type RefreshTokenResponses = {
  /**
   * Successful Response
   */
  200: AccessTokenResponse;
};

export type RefreshTokenResponse =
  RefreshTokenResponses[keyof RefreshTokenResponses];

export type LogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/logout';
};

export type LogoutErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LogoutError = LogoutErrors[keyof LogoutErrors];

export type LogoutResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type ClientOptions = {
  baseURL: `${string}://${string}` | (string & {});
};
