// This file is auto-generated by @hey-api/openapi-ts

/**
 * AccessTokenResponse
 */
export type AccessTokenResponse = {
  /**
   * Access Token
   */
  access_token: string;
  /**
   * Token Type
   */
  token_type?: string;
};

/**
 * AppStatus
 */
export type AppStatus = 'applied' | 'interview' | 'offer' | 'rejected';

/**
 * ApplicationCreate
 */
export type ApplicationCreate = {
  /**
   * Role
   */
  role: string;
  company: CompanyCreate;
  status?: AppStatus;
  work_type?: WorkType;
  work_location?: WorkLocation;
  /**
   * Note
   */
  note?: string | null;
  /**
   * Application Url
   */
  application_url?: string | null;
  /**
   * Interview Date
   */
  interview_date?: string | null;
};

/**
 * ApplicationOrderBy
 */
export type ApplicationOrderBy = 'time_create' | 'time_update';

/**
 * ApplicationRead
 */
export type ApplicationRead = {
  /**
   * Role
   */
  role: string;
  /**
   * Company Id
   */
  company_id: number;
  /**
   * User Id
   */
  user_id: number;
  /**
   * Id
   */
  id: number;
  status: AppStatus;
  work_type: WorkType;
  work_location: WorkLocation;
  /**
   * Note
   */
  note?: string | null;
  /**
   * Application Url
   */
  application_url?: string | null;
  /**
   * Time Create
   */
  time_create: string;
  /**
   * Time Update
   */
  time_update: string;
  /**
   * Interview Date
   */
  interview_date?: string | null;
};

/**
 * ApplicationReadWithCompany
 */
export type ApplicationReadWithCompany = {
  /**
   * Role
   */
  role: string;
  /**
   * Company Id
   */
  company_id: number;
  /**
   * User Id
   */
  user_id: number;
  /**
   * Id
   */
  id: number;
  status: AppStatus;
  work_type: WorkType;
  work_location: WorkLocation;
  /**
   * Note
   */
  note?: string | null;
  /**
   * Application Url
   */
  application_url?: string | null;
  /**
   * Time Create
   */
  time_create: string;
  /**
   * Time Update
   */
  time_update: string;
  /**
   * Interview Date
   */
  interview_date?: string | null;
  company: CompanyRead;
};

/**
 * ApplicationUpdate
 */
export type ApplicationUpdate = {
  /**
   * Role
   */
  role?: string | null;
  company?: CompanyCreate | null;
  status?: AppStatus | null;
  work_type?: WorkType | null;
  work_location?: WorkLocation | null;
  /**
   * Note
   */
  note?: string | null;
  /**
   * Application Url
   */
  application_url?: string | null;
  /**
   * Interview Date
   */
  interview_date?: string | null;
};

/**
 * CompanyCreate
 */
export type CompanyCreate = {
  /**
   * Name
   */
  name: string;
};

/**
 * CompanyOrderBy
 */
export type CompanyOrderBy = 'name';

/**
 * CompanyRead
 */
export type CompanyRead = {
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
};

/**
 * ErrorResponse
 */
export type ErrorResponse = {
  /**
   * Detail
   */
  detail: string;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>;
};

/**
 * MessageResponse
 */
export type MessageResponse = {
  /**
   * Message
   */
  message: string;
};

/**
 * UserChangePassword
 */
export type UserChangePassword = {
  /**
   * Old Password
   * Password must be 8 characters long, contain at least one uppercase letter and one number.
   */
  old_password: string;
  /**
   * New Password
   * Password must be 8 characters long, contain at least one uppercase letter and one number.
   */
  new_password: string;
  /**
   * Confirm New Password
   * Password must be 8 characters long, contain at least one uppercase letter and one number.
   */
  confirm_new_password: string;
};

/**
 * UserCreate
 */
export type UserCreate = {
  /**
   * Username
   * User's email address
   */
  username: string;
  /**
   * Password
   * Password must be 8 characters long, contain at least one uppercase letter and one number.
   */
  password: string;
};

/**
 * UserLogin
 */
export type UserLogin = {
  /**
   * Username
   * User's email address
   */
  username: string;
  /**
   * Password
   * Password must be 8 characters long, contain at least one uppercase letter and one number.
   */
  password: string;
};

/**
 * UserRead
 */
export type UserRead = {
  /**
   * Id
   */
  id: number;
  /**
   * Username
   * User's email address
   */
  username: string;
  /**
   * First Name
   */
  first_name?: string | null;
  /**
   * Second Name
   */
  second_name?: string | null;
  /**
   * Time Create
   */
  time_create: string;
  /**
   * Time Update
   */
  time_update: string;
  /**
   * Is Active
   */
  is_active?: boolean;
};

/**
 * UserUpdate
 */
export type UserUpdate = {
  /**
   * First Name
   */
  first_name?: string | null;
  /**
   * Second Name
   */
  second_name?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>;
  /**
   * Message
   */
  msg: string;
  /**
   * Error Type
   */
  type: string;
};

/**
 * WorkLocation
 */
export type WorkLocation = 'on_site' | 'remote' | 'hybrid';

/**
 * WorkType
 */
export type WorkType =
  | 'full_time'
  | 'part_time'
  | 'internship'
  | 'contract'
  | 'other';

export type CreateUserData = {
  body: UserCreate;
  path?: never;
  query?: never;
  url: '/users';
};

export type CreateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
  /**
   * Successful Response
   */
  201: MessageResponse;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type ActivateUserData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Token
     */
    token: string;
  };
  url: '/users/activate';
};

export type ActivateUserErrors = {
  /**
   * Invalid or expired activation token
   */
  400: ErrorResponse;
  /**
   * User not found
   */
  404: ErrorResponse;
  /**
   * User is already activated
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ActivateUserError = ActivateUserErrors[keyof ActivateUserErrors];

export type ActivateUserResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type ActivateUserResponse =
  ActivateUserResponses[keyof ActivateUserResponses];

export type ChangePasswordData = {
  body: UserChangePassword;
  path?: never;
  query?: never;
  url: '/users/change-password';
};

export type ChangePasswordErrors = {
  /**
   * Old password is incorrect
   */
  400: ErrorResponse;
  /**
   * Missing, invalid, or expired access token
   */
  401: ErrorResponse;
  /**
   * User not found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ChangePasswordError =
  ChangePasswordErrors[keyof ChangePasswordErrors];

export type ChangePasswordResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type ChangePasswordResponse =
  ChangePasswordResponses[keyof ChangePasswordResponses];

export type DeleteUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/users/me';
};

export type DeleteUserErrors = {
  /**
   * Missing, invalid, or expired access token
   */
  401: ErrorResponse;
  /**
   * User not found
   */
  404: ErrorResponse;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetCurrentUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/users/me';
};

export type GetCurrentUserErrors = {
  /**
   * Missing, invalid, or expired access token
   */
  401: ErrorResponse;
  /**
   * User not found
   */
  404: ErrorResponse;
};

export type GetCurrentUserError =
  GetCurrentUserErrors[keyof GetCurrentUserErrors];

export type GetCurrentUserResponses = {
  /**
   * Successful Response
   */
  200: UserRead;
};

export type GetCurrentUserResponse =
  GetCurrentUserResponses[keyof GetCurrentUserResponses];

export type UpdateUserData = {
  body: UserUpdate;
  path?: never;
  query?: never;
  url: '/users/me';
};

export type UpdateUserErrors = {
  /**
   * Missing, invalid, or expired access token
   */
  401: ErrorResponse;
  /**
   * User not found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
  /**
   * Successful Response
   */
  200: UserRead;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type GetApplicationsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Limit
     * Number of items to return
     */
    limit?: number;
    /**
     * Offset
     * Number of items to skip before starting to collect the result set
     */
    offset?: number;
    order_by?: ApplicationOrderBy;
    /**
     * Order Direction
     */
    order_direction?: 'asc' | 'desc';
    /**
     * Status
     */
    status?: Array<AppStatus> | null;
    /**
     * Work Type
     */
    work_type?: Array<WorkType> | null;
    /**
     * Work Location
     */
    work_location?: Array<WorkLocation> | null;
    /**
     * Role Name
     */
    role_name?: string | null;
    /**
     * Company Name
     */
    company_name?: string | null;
  };
  url: '/applications';
};

export type GetApplicationsErrors = {
  /**
   * Access token is invalid
   */
  401: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetApplicationsError =
  GetApplicationsErrors[keyof GetApplicationsErrors];

export type GetApplicationsResponses = {
  /**
   * Response Get Applications
   * Successful Response
   */
  200: Array<ApplicationReadWithCompany>;
};

export type GetApplicationsResponse =
  GetApplicationsResponses[keyof GetApplicationsResponses];

export type CreateApplicationData = {
  body: ApplicationCreate;
  path?: never;
  query?: never;
  url: '/applications';
};

export type CreateApplicationErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateApplicationError =
  CreateApplicationErrors[keyof CreateApplicationErrors];

export type CreateApplicationResponses = {
  /**
   * Successful Response
   */
  200: ApplicationRead;
};

export type CreateApplicationResponse =
  CreateApplicationResponses[keyof CreateApplicationResponses];

export type DeleteApplicationData = {
  body?: never;
  path: {
    /**
     * Application Id
     */
    application_id: number;
  };
  query?: never;
  url: '/applications/{application_id}';
};

export type DeleteApplicationErrors = {
  /**
   * Access token is invalid
   */
  401: ErrorResponse;
  /**
   * User is not authorized to delete this application
   */
  403: ErrorResponse;
  /**
   * Application not found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteApplicationError =
  DeleteApplicationErrors[keyof DeleteApplicationErrors];

export type DeleteApplicationResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteApplicationResponse =
  DeleteApplicationResponses[keyof DeleteApplicationResponses];

export type GetApplicationByIdData = {
  body?: never;
  path: {
    /**
     * Application Id
     */
    application_id: number;
  };
  query?: never;
  url: '/applications/{application_id}';
};

export type GetApplicationByIdErrors = {
  /**
   * Access token is invalid
   */
  401: ErrorResponse;
  /**
   * User is not authorized to access this application
   */
  403: ErrorResponse;
  /**
   * Application not found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetApplicationByIdError =
  GetApplicationByIdErrors[keyof GetApplicationByIdErrors];

export type GetApplicationByIdResponses = {
  /**
   * Successful Response
   */
  200: ApplicationRead;
};

export type GetApplicationByIdResponse =
  GetApplicationByIdResponses[keyof GetApplicationByIdResponses];

export type UpdateApplicationData = {
  body: ApplicationUpdate;
  path: {
    /**
     * Application Id
     */
    application_id: number;
  };
  query?: never;
  url: '/applications/{application_id}';
};

export type UpdateApplicationErrors = {
  /**
   * Access token is invalid
   */
  401: ErrorResponse;
  /**
   * User is not authorized to update this application, or is not active
   */
  403: ErrorResponse;
  /**
   * Application or User not found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateApplicationError =
  UpdateApplicationErrors[keyof UpdateApplicationErrors];

export type UpdateApplicationResponses = {
  /**
   * Successful Response
   */
  200: ApplicationRead;
};

export type UpdateApplicationResponse =
  UpdateApplicationResponses[keyof UpdateApplicationResponses];

export type GetUserCompaniesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Limit
     * Number of items to return
     */
    limit?: number;
    /**
     * Offset
     * Number of items to skip before starting to collect the result set
     */
    offset?: number;
    order_by?: CompanyOrderBy;
    /**
     * Order Direction
     */
    order_direction?: 'asc' | 'desc';
    /**
     * Name Contains
     */
    name_contains?: string | null;
  };
  url: '/companies/user';
};

export type GetUserCompaniesErrors = {
  /**
   * Access token is invalid
   */
  401: ErrorResponse;
  /**
   * Validation error
   */
  422: ErrorResponse;
};

export type GetUserCompaniesError =
  GetUserCompaniesErrors[keyof GetUserCompaniesErrors];

export type GetUserCompaniesResponses = {
  /**
   * Response Get User Companies
   * Successful Response
   */
  200: Array<CompanyRead>;
};

export type GetUserCompaniesResponse =
  GetUserCompaniesResponses[keyof GetUserCompaniesResponses];

export type GetCompanyData = {
  body?: never;
  path: {
    /**
     * Company Id
     */
    company_id: number;
  };
  query?: never;
  url: '/companies/{company_id}';
};

export type GetCompanyErrors = {
  /**
   * Application not found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetCompanyError = GetCompanyErrors[keyof GetCompanyErrors];

export type GetCompanyResponses = {
  /**
   * Successful Response
   */
  200: CompanyRead;
};

export type GetCompanyResponse = GetCompanyResponses[keyof GetCompanyResponses];

export type LoginData = {
  body: UserLogin;
  path?: never;
  query?: never;
  url: '/auth/login';
};

export type LoginErrors = {
  /**
   * Invalid credentials
   */
  401: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
  /**
   * Successful Response
   */
  200: AccessTokenResponse;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type RefreshTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/refresh';
};

export type RefreshTokenErrors = {
  /**
   * Refresh token is not valid or expired
   */
  401: ErrorResponse;
  /**
   * User not found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type RefreshTokenError = RefreshTokenErrors[keyof RefreshTokenErrors];

export type RefreshTokenResponses = {
  /**
   * Successful Response
   */
  200: AccessTokenResponse;
};

export type RefreshTokenResponse =
  RefreshTokenResponses[keyof RefreshTokenResponses];

export type LogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/logout';
};

export type LogoutErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LogoutError = LogoutErrors[keyof LogoutErrors];

export type LogoutResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type ClientOptions = {
  baseURL: `${string}://${string}` | (string & {});
};
