// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
} from '@hey-api/client-axios';
import type {
  CreateUserData,
  CreateUserResponse,
  CreateUserError,
  ActivateUserData,
  ActivateUserResponse,
  ActivateUserError,
  ChangePasswordData,
  ChangePasswordResponse,
  ChangePasswordError,
  GetCurrentUserData,
  GetCurrentUserResponse,
  GetCurrentUserError,
  GetApplicationsByEmailData,
  GetApplicationsByEmailResponse,
  CreateApplicationData,
  CreateApplicationResponse,
  CreateApplicationError,
  DeleteApplicationData,
  DeleteApplicationResponse,
  DeleteApplicationError,
  GetApplicationByIdData,
  GetApplicationByIdResponse,
  GetApplicationByIdError,
  UpdateApplicationData,
  UpdateApplicationResponse,
  UpdateApplicationError,
  LoginData,
  LoginResponse,
  LoginError,
  RefreshTokenData,
  RefreshTokenResponse,
  RefreshTokenError,
  LogoutData,
  LogoutResponse,
  LogoutError,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Create User
 * **Create** a user with provided email and password.
 *
 * Send link to provided email address for account activation.
 *
 * If the user with the email exist, return success response but send warning email to the email address.
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserResponse,
    CreateUserError,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: '/users/',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
  });
};

/**
 * Activate User
 * **Activate** user account using verification token.
 *
 * Token is typically sent via email during user registration.
 */
export const activateUser = <ThrowOnError extends boolean = false>(
  options: Options<ActivateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    ActivateUserResponse,
    ActivateUserError,
    ThrowOnError
  >({
    url: '/users/activate',
    ...options,
  });
};

/**
 * Change Password
 * **Change** user password.
 *
 * Requires valid access token for authentication.
 */
export const changePassword = <ThrowOnError extends boolean = false>(
  options: Options<ChangePasswordData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    ChangePasswordResponse,
    ChangePasswordError,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/change-password',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
  });
};

/**
 * Get Current User
 * **Get** current user information.
 *
 * Requires valid access token for authentication.
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentUserData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentUserResponse,
    GetCurrentUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/me',
    ...options,
  });
};

/**
 * Get Applications By Email
 */
export const getApplicationsByEmail = <ThrowOnError extends boolean = false>(
  options?: Options<GetApplicationsByEmailData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApplicationsByEmailResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/',
    ...options,
  });
};

/**
 * Create Application
 */
export const createApplication = <ThrowOnError extends boolean = false>(
  options: Options<CreateApplicationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateApplicationResponse,
    CreateApplicationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete Application
 */
export const deleteApplication = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApplicationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApplicationResponse,
    DeleteApplicationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/{application_id}',
    ...options,
  });
};

/**
 * Get Application By Id
 */
export const getApplicationById = <ThrowOnError extends boolean = false>(
  options: Options<GetApplicationByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApplicationByIdResponse,
    GetApplicationByIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/{application_id}',
    ...options,
  });
};

/**
 * Update Application
 */
export const updateApplication = <ThrowOnError extends boolean = false>(
  options: Options<UpdateApplicationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateApplicationResponse,
    UpdateApplicationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/{application_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Login
 * **Create** a user with provided email and password.
 *
 * Send link to provided email address for account activation.
 *
 * If the user with the email exist, return success response but send warning email to the email address.
 */
export const login = <ThrowOnError extends boolean = false>(
  options: Options<LoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LoginResponse,
    LoginError,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: '/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
  });
};

/**
 * Refresh Token
 */
export const refreshToken = <ThrowOnError extends boolean = false>(
  options: Options<RefreshTokenData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RefreshTokenResponse,
    RefreshTokenError,
    ThrowOnError
  >({
    url: '/auth/refresh',
    ...options,
  });
};

/**
 * Logout
 */
export const logout = <ThrowOnError extends boolean = false>(
  options: Options<LogoutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LogoutResponse,
    LogoutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/logout',
    ...options,
  });
};
