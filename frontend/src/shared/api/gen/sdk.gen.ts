// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
} from './client';
import type {
  CreateUserData,
  CreateUserResponses,
  CreateUserErrors,
  ActivateUserData,
  ActivateUserResponses,
  ActivateUserErrors,
  ChangePasswordData,
  ChangePasswordResponses,
  ChangePasswordErrors,
  DeleteUserData,
  DeleteUserResponses,
  DeleteUserErrors,
  GetCurrentUserData,
  GetCurrentUserResponses,
  GetCurrentUserErrors,
  UpdateUserData,
  UpdateUserResponses,
  UpdateUserErrors,
  GetApplicationsData,
  GetApplicationsResponses,
  GetApplicationsErrors,
  CreateApplicationData,
  CreateApplicationResponses,
  CreateApplicationErrors,
  DeleteApplicationData,
  DeleteApplicationResponses,
  DeleteApplicationErrors,
  GetApplicationByIdData,
  GetApplicationByIdResponses,
  GetApplicationByIdErrors,
  UpdateApplicationData,
  UpdateApplicationResponses,
  UpdateApplicationErrors,
  GetUserCompaniesData,
  GetUserCompaniesResponses,
  GetUserCompaniesErrors,
  GetCompanyData,
  GetCompanyResponses,
  GetCompanyErrors,
  LoginData,
  LoginResponses,
  LoginErrors,
  RefreshTokenData,
  RefreshTokenResponses,
  RefreshTokenErrors,
  LogoutData,
  LogoutResponses,
  LogoutErrors,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Create User
 * **Create** a user with provided email and password.
 *
 * Send link to provided email address for account activation.
 *
 * If the user with the email exist, return success response but send warning email to the email address.
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserResponses,
    CreateUserErrors,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    responseType: 'json',
    url: '/users/',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options.headers,
    },
  });
};

/**
 * Activate User
 * **Activate** user account using verification token.
 *
 * Token is typically sent via email during user registration.
 */
export const activateUser = <ThrowOnError extends boolean = false>(
  options: Options<ActivateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    ActivateUserResponses,
    ActivateUserErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/users/activate',
    ...options,
  });
};

/**
 * Change Password
 * **Change** user password.
 *
 * Requires valid access token for authentication.
 */
export const changePassword = <ThrowOnError extends boolean = false>(
  options: Options<ChangePasswordData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    ChangePasswordResponses,
    ChangePasswordErrors,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/change-password',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options.headers,
    },
  });
};

/**
 * Delete User
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options?: Options<DeleteUserData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteUserResponses,
    DeleteUserErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/me',
    ...options,
  });
};

/**
 * Get Current User
 * **Get** current user information.
 *
 * Requires valid access token for authentication.
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentUserData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentUserResponses,
    GetCurrentUserErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/me',
    ...options,
  });
};

/**
 * Update User
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateUserResponses,
    UpdateUserErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/me',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Applications
 */
export const getApplications = <ThrowOnError extends boolean = false>(
  options?: Options<GetApplicationsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApplicationsResponses,
    GetApplicationsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/',
    ...options,
  });
};

/**
 * Create Application
 */
export const createApplication = <ThrowOnError extends boolean = false>(
  options: Options<CreateApplicationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateApplicationResponses,
    CreateApplicationErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete Application
 */
export const deleteApplication = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApplicationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApplicationResponses,
    DeleteApplicationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/{application_id}',
    ...options,
  });
};

/**
 * Get Application By Id
 */
export const getApplicationById = <ThrowOnError extends boolean = false>(
  options: Options<GetApplicationByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApplicationByIdResponses,
    GetApplicationByIdErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/{application_id}',
    ...options,
  });
};

/**
 * Update Application
 */
export const updateApplication = <ThrowOnError extends boolean = false>(
  options: Options<UpdateApplicationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateApplicationResponses,
    UpdateApplicationErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/{application_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get User Companies
 */
export const getUserCompanies = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserCompaniesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserCompaniesResponses,
    GetUserCompaniesErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/companies/user',
    ...options,
  });
};

/**
 * Get Company
 */
export const getCompany = <ThrowOnError extends boolean = false>(
  options: Options<GetCompanyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCompanyResponses,
    GetCompanyErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/companies/{company_id}',
    ...options,
  });
};

/**
 * Login
 * **Create** a user with provided email and password.
 *
 * Send link to provided email address for account activation.
 *
 * If the user with the email exist, return success response but send warning email to the email address.
 */
export const login = <ThrowOnError extends boolean = false>(
  options: Options<LoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LoginResponses,
    LoginErrors,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    responseType: 'json',
    url: '/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options.headers,
    },
  });
};

/**
 * Refresh Token
 */
export const refreshToken = <ThrowOnError extends boolean = false>(
  options: Options<RefreshTokenData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RefreshTokenResponses,
    RefreshTokenErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/auth/refresh',
    ...options,
  });
};

/**
 * Logout
 */
export const logout = <ThrowOnError extends boolean = false>(
  options?: Options<LogoutData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    LogoutResponses,
    LogoutErrors,
    ThrowOnError
  >({
    url: '/auth/logout',
    ...options,
  });
};
