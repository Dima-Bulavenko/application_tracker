// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zAccessTokenResponse = z.object({
  access_token: z.string(),
  token_type: z.string().default('bearer'),
});

export const zAppStatus = z.enum(['applied', 'interview', 'offer', 'rejected']);

export const zApplicationCreate = z.object({
  role: z.string(),
  company: z.object({ name: z.string().max(40) }),
  status: z
    .enum(['applied', 'interview', 'offer', 'rejected'])
    .default('applied'),
  work_type: z
    .enum(['full_time', 'part_time', 'internship', 'contract', 'other'])
    .default('full_time'),
  work_location: z.enum(['on_site', 'remote', 'hybrid']).default('on_site'),
  note: z.union([z.string(), z.null()]).optional(),
  application_url: z.union([z.string(), z.null()]).optional(),
  interview_date: z
    .union([z.string().datetime({ offset: true }), z.null()])
    .optional(),
});

export const zApplicationOrderBy = z.enum(['time_create', 'time_update']);

export const zApplicationRead = z.object({
  role: z.string(),
  company_id: z.number().int(),
  user_id: z.number().int(),
  id: z.number().int(),
  status: z
    .enum(['applied', 'interview', 'offer', 'rejected'])
    .default('applied'),
  work_type: z
    .enum(['full_time', 'part_time', 'internship', 'contract', 'other'])
    .default('full_time'),
  work_location: z.enum(['on_site', 'remote', 'hybrid']).default('on_site'),
  note: z.union([z.string(), z.null()]).optional(),
  application_url: z.union([z.string(), z.null()]).optional(),
  time_create: z
    .string()
    .datetime({ offset: true })
    .default('2025-08-30T18:36:33.238871Z'),
  time_update: z
    .string()
    .datetime({ offset: true })
    .default('2025-08-30T18:36:33.238931Z'),
  interview_date: z
    .union([z.string().datetime({ offset: true }), z.null()])
    .optional(),
});

export const zApplicationReadWithCompany = z.object({
  role: z.string(),
  company_id: z.number().int(),
  user_id: z.number().int(),
  id: z.number().int(),
  status: z
    .enum(['applied', 'interview', 'offer', 'rejected'])
    .default('applied'),
  work_type: z
    .enum(['full_time', 'part_time', 'internship', 'contract', 'other'])
    .default('full_time'),
  work_location: z.enum(['on_site', 'remote', 'hybrid']).default('on_site'),
  note: z.union([z.string(), z.null()]).optional(),
  application_url: z.union([z.string(), z.null()]).optional(),
  time_create: z
    .string()
    .datetime({ offset: true })
    .default('2025-08-30T18:36:33.238871Z'),
  time_update: z
    .string()
    .datetime({ offset: true })
    .default('2025-08-30T18:36:33.238931Z'),
  interview_date: z
    .union([z.string().datetime({ offset: true }), z.null()])
    .optional(),
  company: z.object({ id: z.number().int().gt(0), name: z.string().max(40) }),
});

export const zApplicationUpdate = z.object({
  role: z.union([z.string(), z.null()]).optional(),
  company: z
    .union([z.object({ name: z.string().max(40) }), z.null()])
    .optional(),
  status: z
    .union([z.enum(['applied', 'interview', 'offer', 'rejected']), z.null()])
    .optional(),
  work_type: z
    .union([
      z.enum(['full_time', 'part_time', 'internship', 'contract', 'other']),
      z.null(),
    ])
    .optional(),
  work_location: z
    .union([z.enum(['on_site', 'remote', 'hybrid']), z.null()])
    .optional(),
  note: z.union([z.string(), z.null()]).optional(),
  application_url: z.union([z.string(), z.null()]).optional(),
  interview_date: z
    .union([z.string().datetime({ offset: true }), z.null()])
    .optional(),
});

export const zCompanyCreate = z.object({ name: z.string().max(40) });

export const zCompanyRead = z.object({
  id: z.number().int().gt(0),
  name: z.string().max(40),
});

export const zErrorResponse = z.object({ detail: z.string() });

export const zHTTPValidationError = z.object({
  detail: z
    .array(
      z.object({
        loc: z.array(z.union([z.string(), z.number().int()])),
        msg: z.string(),
        type: z.string(),
      })
    )
    .optional(),
});

export const zMessageResponse = z.object({ message: z.string() });

export const zUserChangePassword = z.object({
  old_password: z
    .string()
    .regex(new RegExp('^(?=.*[A-Z])(?=.*\\d).{8,}$'))
    .describe(
      'Password must be 8 characters long, contain at least one uppercase letter and one number.'
    ),
  new_password: z
    .string()
    .regex(new RegExp('^(?=.*[A-Z])(?=.*\\d).{8,}$'))
    .describe(
      'Password must be 8 characters long, contain at least one uppercase letter and one number.'
    ),
  confirm_new_password: z
    .string()
    .regex(new RegExp('^(?=.*[A-Z])(?=.*\\d).{8,}$'))
    .describe(
      'Password must be 8 characters long, contain at least one uppercase letter and one number.'
    ),
});

export const zUserCreate = z.object({
  username: z.string().email().describe("User's email address"),
  password: z
    .string()
    .regex(new RegExp('^(?=.*[A-Z])(?=.*\\d).{8,}$'))
    .describe(
      'Password must be 8 characters long, contain at least one uppercase letter and one number.'
    ),
});

export const zUserLogin = z.object({
  username: z.string().email().describe("User's email address"),
  password: z
    .string()
    .regex(new RegExp('^(?=.*[A-Z])(?=.*\\d).{8,}$'))
    .describe(
      'Password must be 8 characters long, contain at least one uppercase letter and one number.'
    ),
});

export const zUserRead = z.object({
  id: z.number().int(),
  username: z.string().email().describe("User's email address"),
  first_name: z.union([z.string().max(40), z.null()]).optional(),
  second_name: z.union([z.string().max(40), z.null()]).optional(),
  time_create: z.string().datetime({ offset: true }),
  time_update: z.string().datetime({ offset: true }),
  is_active: z.boolean().default(true),
});

export const zValidationError = z.object({
  loc: z.array(z.union([z.string(), z.number().int()])),
  msg: z.string(),
  type: z.string(),
});

export const zWorkLocation = z.enum(['on_site', 'remote', 'hybrid']);

export const zWorkType = z.enum([
  'full_time',
  'part_time',
  'internship',
  'contract',
  'other',
]);
