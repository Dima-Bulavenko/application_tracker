// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod/v3';

export const zAccessTokenResponse = z.object({
  access_token: z.string(),
  token_type: z.string().optional().default('bearer'),
});

export const zAppStatus = z.enum(['applied', 'interview', 'offer', 'rejected']);

export const zCompanyCreate = z.object({
  name: z.string().max(40),
});

export const zWorkType = z.enum([
  'full_time',
  'part_time',
  'internship',
  'contract',
  'other',
]);

export const zWorkLocation = z.enum(['on_site', 'remote', 'hybrid']);

export const zApplicationCreate = z.object({
  role: z.string(),
  company: zCompanyCreate,
  status: zAppStatus.optional(),
  work_type: zWorkType.optional(),
  work_location: zWorkLocation.optional(),
  note: z.union([z.string(), z.null()]).optional(),
  application_url: z.union([z.string(), z.null()]).optional(),
  interview_date: z
    .union([
      z.string().datetime({
        offset: true,
      }),
      z.null(),
    ])
    .optional(),
});

export const zApplicationOrderBy = z.enum(['time_create', 'time_update']);

export const zApplicationRead = z.object({
  role: z.string(),
  company_id: z.number().int(),
  user_id: z.number().int(),
  id: z.number().int(),
  status: zAppStatus,
  work_type: zWorkType,
  work_location: zWorkLocation,
  note: z.union([z.string(), z.null()]).optional(),
  application_url: z.union([z.string(), z.null()]).optional(),
  time_create: z.string().datetime({
    offset: true,
  }),
  time_update: z.string().datetime({
    offset: true,
  }),
  interview_date: z
    .union([
      z.string().datetime({
        offset: true,
      }),
      z.null(),
    ])
    .optional(),
});

export const zCompanyRead = z.object({
  id: z.number().int().gt(0),
  name: z.string().max(40),
});

export const zApplicationReadWithCompany = z.object({
  role: z.string(),
  company_id: z.number().int(),
  user_id: z.number().int(),
  id: z.number().int(),
  status: zAppStatus,
  work_type: zWorkType,
  work_location: zWorkLocation,
  note: z.union([z.string(), z.null()]).optional(),
  application_url: z.union([z.string(), z.null()]).optional(),
  time_create: z.string().datetime({
    offset: true,
  }),
  time_update: z.string().datetime({
    offset: true,
  }),
  interview_date: z
    .union([
      z.string().datetime({
        offset: true,
      }),
      z.null(),
    ])
    .optional(),
  company: zCompanyRead,
});

export const zApplicationUpdate = z.object({
  role: z.union([z.string(), z.null()]).optional(),
  company: z.union([zCompanyCreate, z.null()]).optional(),
  status: z.union([zAppStatus, z.null()]).optional(),
  work_type: z.union([zWorkType, z.null()]).optional(),
  work_location: z.union([zWorkLocation, z.null()]).optional(),
  note: z.union([z.string(), z.null()]).optional(),
  application_url: z.union([z.string(), z.null()]).optional(),
  interview_date: z
    .union([
      z.string().datetime({
        offset: true,
      }),
      z.null(),
    ])
    .optional(),
});

export const zCompanyOrderBy = z.enum(['name']);

export const zErrorResponse = z.object({
  detail: z.string(),
});

export const zValidationError = z.object({
  loc: z.array(z.union([z.string(), z.number().int()])),
  msg: z.string(),
  type: z.string(),
});

export const zHttpValidationError = z.object({
  detail: z.array(zValidationError).optional(),
});

export const zMessageResponse = z.object({
  message: z.string(),
});

export const zUserChangePassword = z.object({
  old_password: z
    .string()
    .regex(/^(?=.*[A-Z])(?=.*\d).{8,}$/)
    .describe(
      'Password must be 8 characters long, contain at least one uppercase letter and one number.'
    ),
  new_password: z
    .string()
    .regex(/^(?=.*[A-Z])(?=.*\d).{8,}$/)
    .describe(
      'Password must be 8 characters long, contain at least one uppercase letter and one number.'
    ),
  confirm_new_password: z
    .string()
    .regex(/^(?=.*[A-Z])(?=.*\d).{8,}$/)
    .describe(
      'Password must be 8 characters long, contain at least one uppercase letter and one number.'
    ),
});

export const zUserCreate = z.object({
  username: z.string().email().describe("User's email address"),
  password: z
    .string()
    .regex(/^(?=.*[A-Z])(?=.*\d).{8,}$/)
    .describe(
      'Password must be 8 characters long, contain at least one uppercase letter and one number.'
    ),
});

export const zUserLogin = z.object({
  username: z.string().email().describe("User's email address"),
  password: z
    .string()
    .regex(/^(?=.*[A-Z])(?=.*\d).{8,}$/)
    .describe(
      'Password must be 8 characters long, contain at least one uppercase letter and one number.'
    ),
});

export const zUserRead = z.object({
  id: z.number().int(),
  username: z.string().email().describe("User's email address"),
  first_name: z.union([z.string().max(40), z.null()]).optional(),
  second_name: z.union([z.string().max(40), z.null()]).optional(),
  time_create: z.string().datetime({
    offset: true,
  }),
  time_update: z.string().datetime({
    offset: true,
  }),
  is_active: z.boolean().optional().default(true),
});

export const zUserUpdate = z.object({
  first_name: z.union([z.string().max(40), z.null()]).optional(),
  second_name: z.union([z.string().max(40), z.null()]).optional(),
});

export const zCreateUserData = z.object({
  body: zUserCreate,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zActivateUserData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.object({
    token: z.string(),
  }),
});

export const zChangePasswordData = z.object({
  body: zUserChangePassword,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zDeleteUserData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetCurrentUserData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zUpdateUserData = z.object({
  body: zUserUpdate,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetApplicationsData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      limit: z
        .number()
        .int()
        .gte(1)
        .lte(50)
        .describe('Number of items to return')
        .optional()
        .default(10),
      offset: z
        .number()
        .int()
        .gte(0)
        .describe(
          'Number of items to skip before starting to collect the result set'
        )
        .optional()
        .default(0),
      order_by: zApplicationOrderBy.optional(),
      order_direction: z.enum(['asc', 'desc']).optional(),
      status: z.union([z.array(zAppStatus), z.null()]).optional(),
      work_type: z.union([z.array(zWorkType), z.null()]).optional(),
      work_location: z.union([z.array(zWorkLocation), z.null()]).optional(),
      role_name: z.union([z.string(), z.null()]).optional(),
      company_name: z.union([z.string(), z.null()]).optional(),
    })
    .optional(),
});

export const zCreateApplicationData = z.object({
  body: zApplicationCreate,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zDeleteApplicationData = z.object({
  body: z.never().optional(),
  path: z.object({
    application_id: z.number().int(),
  }),
  query: z.never().optional(),
});

export const zGetApplicationByIdData = z.object({
  body: z.never().optional(),
  path: z.object({
    application_id: z.number().int(),
  }),
  query: z.never().optional(),
});

export const zUpdateApplicationData = z.object({
  body: zApplicationUpdate,
  path: z.object({
    application_id: z.number().int(),
  }),
  query: z.never().optional(),
});

export const zGetUserCompaniesData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      limit: z
        .number()
        .int()
        .gte(1)
        .lte(50)
        .describe('Number of items to return')
        .optional()
        .default(10),
      offset: z
        .number()
        .int()
        .gte(0)
        .describe(
          'Number of items to skip before starting to collect the result set'
        )
        .optional()
        .default(0),
      order_by: zCompanyOrderBy.optional(),
      order_direction: z.enum(['asc', 'desc']).optional(),
      name_contains: z.union([z.string(), z.null()]).optional(),
    })
    .optional(),
});

export const zGetCompanyData = z.object({
  body: z.never().optional(),
  path: z.object({
    company_id: z.number().int(),
  }),
  query: z.never().optional(),
});

export const zLoginData = z.object({
  body: zUserLogin,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zRefreshTokenData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zLogoutData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});
